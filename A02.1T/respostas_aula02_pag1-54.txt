RESPOSTAS – TMS Aula 02 (Págs. 1–54) – Atividade “Gerando versões”

1) Estratégia para identificar versões (com justificativa)
Usaria Versionamento Semântico (SemVer) no formato MAJOR.MINOR.PATCH, porque comunica claramente o impacto de cada mudança: 
- MAJOR para mudanças incompatíveis na API; 
- MINOR para novas funcionalidades mantendo compatibilidade; 
- PATCH para correções de bugs compatíveis.
Complementaria, quando necessário, com sufixos de pré‑lançamento para estágios (alpha: -a.X, beta: -b.X, release candidate: -rc) e indicaria LTS quando for uma versão de suporte estendido. Essa abordagem garante unicidade, imutabilidade, representatividade e completude das versões e é a mais usada em combinação com outros esquemas.

2) Nome da primeira versão para o público
1.0.0 (primeiro “Release” estável – sem letras).

3) Nova funcionalidade requisitada e implementada (após o lançamento)
1.1.0 (incremento MINOR, pois adiciona funcionalidade mantendo compatibilidade).

4) Histórico considerando a sequência anterior em SemVer
1.0.0 → 1.1.0

5) A partir da versão anterior, publicar: 3 correções, 2 funcionalidades compatíveis, 2 correções
Partindo de 1.1.0:
- 3 correções (PATCH): 1.1.1 → 1.1.2 → 1.1.3
- 2 funcionalidades compatíveis (MINOR reseta PATCH): 1.2.0 → 1.3.0
- 2 correções (PATCH): 1.3.1 → 1.3.2
Versão mais recente: 1.3.2

6) Mudanças críticas na API (breaking) + depois: 1 funcionalidade e 2 correções
Partindo de 1.3.2:
- Breaking change (MAJOR reseta MINOR e PATCH): 2.0.0
- Nova funcionalidade compatível: 2.1.0
- Correções: 2.1.1 → 2.1.2
Histórico (trecho final): … → 2.0.0 → 2.1.0 → 2.1.1 → 2.1.2

7) Exemplos representativos (apoiados nas páginas 1–54)
- Esquemas/Termos:
  • Numérico sequencial: Windows 7 … 12; Java 5 … 22; Bootstrap 1 … 5.
  • Nominal (codinomes): Android (Cupcake, Donut, …); Ubuntu (Warty Warthog … Noble Numbat).
  • CalVer (baseado em calendário): Ubuntu (ex.: 24.04). 
  • SemVer (M.m.p): Python (ex.: 3.12.5); Ubuntu (16.04.7, 18.04.6, 22.04.4, 23.10, 24.04).
  • Estágios de desenvolvimento: Alpha (-a.X), Beta (-b.X), Release Candidate (-rc), Release (sem letras) e correções pós‑release (patch > 0).

Observações:
- Lógica de incremento SemVer usada: MAJOR reinicia MINOR e PATCH; MINOR reinicia PATCH; PATCH não altera os demais.
- Todos os exemplos e definições acima estão contidos nas páginas 1–54 do material: “Esquemas de versionamento”, “Versionamento Semântico (SemVer)”, “Termos comuns” e “Versão identificada”.
